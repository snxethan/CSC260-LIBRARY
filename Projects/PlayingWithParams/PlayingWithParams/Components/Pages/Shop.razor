@page "/shop"
@rendermode InteractiveServer

<PageTitle>Shop</PageTitle>

<h1>Shop</h1>

@* Route parameters for starting gold, item cost, markup and max items *@
@page "/shop/{StartingGold:int}/{Cost:int}/{Markup:int}/{MaxItems:int}"

<p>Starting Gold: @StartingGold</p>
<p>Item Cost: @Cost</p>
<p>Markup: @Markup</p>
<p>Max Items: @MaxItems</p>
<hr />
<p>Items Purchased: @ItemsPurchased</p>
<p>Total Cost of Order: @TotalCost</p>
<p>Remaining Gold: @RemainingGold</p>
@if (!string.IsNullOrEmpty(ErrorMessage))
{
	<p style="color:red; font-weight:bold;">@ErrorMessage</p>
}

<button class="btn btn-primary" @onclick="BuyItem" disabled="@(!string.IsNullOrEmpty(ErrorMessage) && (ItemsPurchased >= MaxItems || RemainingGold < (Cost + Markup)))">Buy Item</button>
<br />

<br />
<a href="/merchants" class="btn btn-secondary">Back to Merchants</a>



@code {
// The route values should be used to set the initial values for the shop
// If someone browses to the Expensive Merchant at /shop/10000/100/100/10
// They have 10,000 gold, items cost 100, there is a 100 markup per item, and they can only buy up to 10 items
// Display the values for gold, cost, markup and max items at the top of the page so the user knows them
// Add a Buy Item button
// When this button is clicked, keep track of how many items the user has purchased
// Each item is the cost + markup values
// Make sure the user doesn't purchase more than the MaxItems of the shop
// Make sure the user doesn't buy more item than they have gold for
// If the user tries to buy too many items, or doesn't have enough gold, show an Angry (bold/red) message so they know
// Display value for
// Number of items purchased
// Total gold cost of the user's order
// Remaining Gold that the user has
// Add a link that will take the user back to the merchants page

	[Parameter] public int StartingGold { get; set; }
	[Parameter] public int Cost { get; set; }
	[Parameter] public int Markup { get; set; }
	[Parameter] public int MaxItems { get; set; }
	private int ItemsPurchased = 0;
	private string ErrorMessage = string.Empty;
	private int TotalCost => ItemsPurchased * (Cost + Markup);
	private int RemainingGold => StartingGold - TotalCost;
	private void BuyItem()
	{
		ErrorMessage = string.Empty;
		if (ItemsPurchased >= MaxItems)
		{
			ErrorMessage = "You cannot buy more items!";
			return;
		}
		if (RemainingGold < (Cost + Markup))
		{
			ErrorMessage = "You do not have enough goldm!";
			return;
		}
		ItemsPurchased++;
	}
	protected override void OnInitialized()
	{
		if (StartingGold < 0 || Cost < 0 || Markup < 0 || MaxItems < 0)
		{
			ErrorMessage = "Invalid shop parameters!";
		}
	}
}
